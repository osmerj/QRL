// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.

syntax = "proto3";

package qrl;

import "qrl.proto";

// Adding old code to refactor while keeping things working
message LegacyMessage {
    enum FuncName {
        VE = 0;         // Version
        PL = 1;         // Peers List
        PONG = 2;       // Pong

        MR = 3;         // Message received
        SFM = 4;        // Send Full Message
        BK = 5;         // Block
        FB = 6;         // Fetch request for block
        PB = 7;         // Push Block

        ST = 9;        // Stake Transaction
        DST = 10;       // Destake Transaction
        DT = 11;        // Duplicate Transaction
        TX = 12;        // Transfer Transaction
        VT = 13;        // Vote
        LT = 14;
        EPH = 15;

        SYNC = 16;      // Add into synced list, if the node replies
    }

    FuncName func_name = 1;

    oneof data {
        NoData noData = 2;
        VEData veData = 3;
        PLData plData = 4;
        PONGData pongData = 5;
        MRData mrData = 6;
        MRData sfmData = 7;
        BKData bkData = 8;
        FBData fbData = 9;
        PBData pbData = 10;
        TransactionData stData = 11;
        TransactionData vtData = 12;
        SYNCData syncData = 13;
    }
}

message NoData { }

message VEData
{
    string version = 1;
    bytes genesis_prev_hash = 2;
}

message PLData
{
    repeated string peer_ips = 1;
}

message PONGData
{
}

message MRData {
    bytes hash = 1;                                     // FIXME: rename this to block_headerhash
    LegacyMessage.FuncName type = 2;                    // FIXME: type/string what is this
    bytes stake_selector = 3;
    uint64 block_number = 4;
    bytes prev_headerhash = 5;
    bytes reveal_hash = 6;
}

message BKData {
    MRData mrData = 1;
    Block block = 2;
}

message FBData {
    uint64 index = 1;
}

message PBData {
    Block block = 1;
}

message SYNCData
{
    string state = 1;
}

message TransactionData {
    enum Type {
        UNKNOWN = 0;
        TRANSFER = 1;
        STAKE = 2;
        DESTAKE = 3;
        COINBASE = 4;
        LATTICE = 5;
        DUPLICATE = 6;
        VOTE = 7;
    }

    Type type = 1;

    uint64 nonce = 2;
    bytes addr_from = 3;
    bytes public_key = 4;
    bytes transaction_hash = 5;
    uint32 ots_key = 6;
    bytes signature = 7;

    oneof transactionType {
        Transfer transfer = 8;
        Stake stake = 9;
        CoinBase coinbase = 10;
        LatticePublicKey latticePK = 11;
        Duplicate duplicate = 12;
        Vote vote = 13;
    }

    //////////
    message Transfer {
        bytes addr_to = 1;
        uint64 amount = 2;
        uint64 fee = 3;
    }

    message Stake {
        uint64 activation_blocknumber = 1;
        bytes slavePK = 2;
        bytes hash = 3;
    }

    message Destake {
    }

    message CoinBase {
        bytes addr_to = 1;
        uint64 amount = 2;
    }

    message LatticePublicKey {
        bytes kyber_pk = 1;
        bytes tesla_pk = 2;
    }

    message Duplicate {
        uint64 block_number = 1;
        uint64 prev_header_hash = 2;
        bytes coinbase1_hhash = 3;
        bytes coinbase2_hhash = 4;
        Transaction coinbase1 = 5;
        Transaction coinbase2 = 6;
    }

    message Vote {
        uint64 block_number = 1;
        bytes hash_header = 2;
    }

}